{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","hall","startDate","endDate","doubleDuty","raDuty","formData","setFormData","name","preferences","SRA","staffData","setStaffData","sendFormData","formEvent","a","preventDefault","requestOptions","method","body","JSON","stringify","responseType","fetch","window","location","href","response","link","document","createElement","URL","blob","url","createObjectURL","download","concat","appendChild","click","removeChild","className","Container","Form","onSubmit","Label","style","marginBottom","Row","Check","type","label","onClick","Group","Control","required","onChange","inputEvent","target","value","Col","xs","placeholder","map","data","index","Fragment","key","item","index2","input","index3","item2","index4","Button","variant","push","addDate","splice","removeStaffMember","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e53c653.chunk.js","sourcesContent":["import React, {useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nfunction App() {\r\n  let [formData, setFormData] = useState({\r\n    hall: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    doubleDuty: false,\r\n    raDuty: true,\r\n  });\r\n\r\n  let [staffData, setStaffData] = useState([\r\n    {\r\n      name: \"\",\r\n      preferences: [\"\"],\r\n      SRA: false,\r\n    },\r\n  ]);\r\n\r\n  const sendFormData = async (formEvent) => {\r\n    formEvent.preventDefault();\r\n    formData.staffData = staffData;\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      \"Content-Type\": \"application/json\",\r\n      body: JSON.stringify(formData),\r\n      responseType:\r\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    };\r\n\r\n    let response = await fetch(\r\n      window.location.href + \"schedule_duty\",\r\n      requestOptions\r\n    );\r\n\r\n    //Download Excel File from website\r\n    const link = document.createElement(\"a\");\r\n    const url = URL.createObjectURL(await response.blob());\r\n\r\n    link.download = formData.hall.concat(' ', 'Duty Calendar');\r\n    link.href = url;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  //For Some reason I have to use funcs to increase the size of my states\r\n  //If I directly call the functions React crashes with error too many re renders\r\n  function addStaffMember() {\r\n    let data = { name: \"\", preferences: [\"\"] };\r\n    setStaffData([...staffData, data]);\r\n  }\r\n\r\n  function addDate(index) {\r\n    staffData[index.index].preferences.push(\"\");\r\n    setStaffData([...staffData]);\r\n  }\r\n\r\n  function removeStaffMember(index) {\r\n    staffData.splice(index.index, 1);\r\n    setStaffData([...staffData]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"App-header\"> Residence Life Auto Duty Scheduler </h1>\r\n      <Container className=\"Form-Format\">\r\n        <Form onSubmit={(formEvent) => sendFormData(formEvent)}>\r\n          <Form.Label className=\"Scheduling-options\" style={{marginBottom: '20px'}}>\r\n            Duty Scheduling Options\r\n          </Form.Label>\r\n          <Form.Row className=\"RD-duty-checkbox\"> \r\n                <Form.Check\r\n                  type=\"checkBox\"\r\n                  label=\"RD Duty (Leave Unchecked for RA Duty)\"\r\n                  className=\"doubleDuty-checkBox\"\r\n                  onClick={() =>\r\n                    setFormData({\r\n                      ...formData,\r\n                      raDuty: !formData.raDuty,\r\n                    })\r\n                  }\r\n                />\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Group>\r\n              <Form.Label>Start Date</Form.Label>\r\n              <Form.Control\r\n                type=\"date\"\r\n                required=\"True\"\r\n                onChange={(inputEvent) =>\r\n                  setFormData({\r\n                    ...formData,\r\n                    startDate: inputEvent.target.value,\r\n                  })\r\n                }\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Col xs={\"auto\"}>\r\n                <Form.Label>End Date</Form.Label>\r\n                <Form.Control\r\n                  required=\"True\"\r\n                  type=\"date\"\r\n                  onChange={(inputEvent) =>\r\n                    setFormData({\r\n                      ...formData,\r\n                      endDate: inputEvent.target.value,\r\n                    })\r\n                  }\r\n                ></Form.Control>\r\n              </Col>\r\n            </Form.Group>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Group className=\"input-box\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Hall Name\"\r\n                onChange={(inputEvent) =>\r\n                  setFormData({ ...formData, hall: inputEvent.target.value })\r\n                }\r\n                value={formData.hall}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Col xs={\"auto\"}>\r\n                <Form.Check\r\n                  type=\"checkBox\"\r\n                  label=\"Weekend Double Duty\"\r\n                  className=\"doubleDuty-checkBox\"\r\n                  onClick={() =>\r\n                    setFormData({\r\n                      ...formData,\r\n                      doubleDuty: !formData.doubleDuty,\r\n                    })\r\n                  }\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n          </Form.Row>\r\n          <Form.Label className=\"Staff-members\" style={{marginBottom: '15px'}}>Staff Members </Form.Label>\r\n\r\n          {staffData.map((data, index) => (\r\n            <React.Fragment>\r\n              <Form.Row>\r\n                <Form.Group key={index} className=\"input-box\">\r\n                  <Form.Label> Name </Form.Label>\r\n\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    required=\"True\"\r\n                    placeholder=\"Enter staff member\"\r\n                    onChange={(inputEvent) =>\r\n                      setStaffData(\r\n                        staffData.map((item, index2) =>\r\n                          index === index2\r\n                            ? {\r\n                                ...staffData[index],\r\n                                name: inputEvent.target.value,\r\n                              }\r\n                            : item\r\n                        )\r\n                      )\r\n                    }\r\n                    value={staffData[index].name}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group className=\"sra-checkbox\">\r\n                  <Col xs={\"auto\"}>\r\n                    <Form.Check\r\n                      type=\"checkBox\"\r\n                      label=\"SRA\"\r\n                      className=\"sra-checkBox\"\r\n                      onClick={() =>\r\n                        setStaffData(\r\n                          staffData.map((item, index2) =>\r\n                            index === index2\r\n                              ? {\r\n                                  ...staffData[index],\r\n                                  SRA: true,\r\n                                }\r\n                              : item\r\n                          )\r\n                        )\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Form.Label>Days Cannot Sit</Form.Label>\r\n              <Form.Row>\r\n                {staffData[index].preferences.map((input, index2) => (\r\n                  <React.Fragment>\r\n                    <Col xs=\"auto\">\r\n                      <Form.Group key={index}>\r\n                        <Form.Control\r\n                          type=\"date\"\r\n                          onChange={(inputEvent) =>\r\n                            setStaffData(\r\n                              staffData.map((item, index3) =>\r\n                                index === index3\r\n                                  ? {\r\n                                      ...staffData[index],\r\n                                      preferences: item.preferences.map(\r\n                                        (item2, index4) =>\r\n                                          index2 === index4\r\n                                            ? inputEvent.target.value\r\n                                            : item2\r\n                                      ),\r\n                                    }\r\n                                  : item\r\n                              )\r\n                            )\r\n                          }\r\n                          value={staffData[index].preferences[index2]}\r\n                        />\r\n                      </Form.Group>\r\n                    </Col>\r\n                  </React.Fragment>\r\n                ))}\r\n                <Col>\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    className=\"btn.btn-secondary\"\r\n                    onClick={() => addDate({ index })}\r\n                  >\r\n                    Add date\r\n                  </Button>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Button\r\n                    variant=\"danger\"\r\n                    onClick={() => removeStaffMember({ index })}\r\n                    style = {{marginBottom: '35px'}}\r\n                  >\r\n                    Remove Staff Member\r\n                  </Button>\r\n                </Col>\r\n              </Form.Row>\r\n            </React.Fragment>\r\n          ))}\r\n\r\n          <Form.Row className=\"submit-row\">\r\n            <Form.Group>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Col>\r\n                <Button variant=\"secondary\" onClick={addStaffMember}>\r\n                  Add staff member\r\n                </Button>\r\n              </Col>\r\n            </Form.Group>\r\n          </Form.Row>\r\n        </Form>\r\n      </Container>\r\n\r\n      <footer className=\"Footer\"> &copy; Pharez J. Varlack </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}