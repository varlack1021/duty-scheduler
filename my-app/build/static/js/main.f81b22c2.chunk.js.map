{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","hall","startDate","endDate","doubleDuty","formData","setFormData","name","preferences","SRA","staffData","setStaffData","sendFormData","formEvent","a","preventDefault","console","log","requestOptions","method","body","JSON","stringify","responseType","fetch","response","link","document","createElement","URL","blob","url","createObjectURL","download","href","appendChild","click","removeChild","className","Container","Form","onSubmit","Label","style","marginBottom","Row","Group","Control","type","required","onChange","inputEvent","target","value","Col","xs","placeholder","Check","label","onClick","map","data","index","Fragment","key","item","index2","input","index3","item2","index4","Button","variant","push","addDate","splice","removeStaffMember","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f81b22c2.chunk.js","sourcesContent":["import React, {useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\n\nfunction App() {\n  let [formData, setFormData] = useState({\n    hall: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    doubleDuty: false,\n  });\n\n  let [staffData, setStaffData] = useState([\n    {\n      name: \"\",\n      preferences: [\"\"],\n      SRA: false,\n    },\n  ]);\n\n  const sendFormData = async (formEvent) => {\n    formEvent.preventDefault();\n    console.log(formData);\n    formData.staffData = staffData;\n    const requestOptions = {\n      method: \"POST\",\n      \"Content-Type\": \"application/json\",\n      body: JSON.stringify(formData),\n      responseType:\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    };\n\n    let response = await fetch(\n      \"http://localhost:8000/schedule_duty\",\n      requestOptions\n    );\n\n    //Download Excel File from website\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(await response.blob());\n\n    link.download = \"Duty Calendar\";\n    link.href = url;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  //For Some reason I have to use funcs to increase the size of my states\n  //If I directly call the functions React crashes with error too many re renders\n  function addStaffMember() {\n    let data = { name: \"\", preferences: [\"\"] };\n    setStaffData([...staffData, data]);\n  }\n\n  function addDate(index) {\n    console.log(formData);\n    staffData[index.index].preferences.push(\"\");\n    setStaffData([...staffData]);\n  }\n\n  function removeStaffMember(index) {\n    staffData.splice(index.index, 1);\n    setStaffData([...staffData]);\n  }\n\n  return (\n    <div className=\"App\">\n      <p className=\"Seperation\">\n        This text is to have a component between the first component I want\n        padding and the top\n      </p>\n      <h1 className=\"App-header\"> Residence Life Auto Duty Scheduler </h1>\n      <Container className=\"Form-Format\">\n        <Form onSubmit={(formEvent) => sendFormData(formEvent)}>\n          <Form.Label className=\"Scheduling-options\" style={{marginBottom: '20px'}}>\n            Duty Scheduling Options\n          </Form.Label>\n          <Form.Row>\n            <Form.Group>\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                required=\"True\"\n                onChange={(inputEvent) =>\n                  setFormData({\n                    ...formData,\n                    startDate: inputEvent.target.value,\n                  })\n                }\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group>\n              <Col xs={\"auto\"}>\n                <Form.Label>End Date</Form.Label>\n                <Form.Control\n                  required=\"True\"\n                  type=\"date\"\n                  onChange={(inputEvent) =>\n                    setFormData({\n                      ...formData,\n                      endDate: inputEvent.target.value,\n                    })\n                  }\n                ></Form.Control>\n              </Col>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group className=\"input-box\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter Hall Name\"\n                onChange={(inputEvent) =>\n                  setFormData({ ...formData, hall: inputEvent.target.value })\n                }\n                value={formData.hall}\n              />\n            </Form.Group>\n            <Form.Group>\n              <Col xs={\"auto\"}>\n                <Form.Check\n                  type=\"checkBox\"\n                  label=\"Weekend Double Duty\"\n                  className=\"doubleDuty-checkBox\"\n                  onClick={() =>\n                    setFormData({\n                      ...formData,\n                      doubleDuty: !formData.doubleDuty,\n                    })\n                  }\n                />\n              </Col>\n            </Form.Group>\n          </Form.Row>\n          <Form.Label className=\"Staff-members\" style={{marginBottom: '15px'}}>Staff Members </Form.Label>\n\n          {staffData.map((data, index) => (\n            <React.Fragment>\n              <Form.Row>\n                <Form.Group key={index} className=\"input-box\">\n                  <Form.Label> Name </Form.Label>\n\n                  <Form.Control\n                    type=\"text\"\n                    required=\"True\"\n                    placeholder=\"Enter staff member\"\n                    onChange={(inputEvent) =>\n                      setStaffData(\n                        staffData.map((item, index2) =>\n                          index === index2\n                            ? {\n                                ...staffData[index],\n                                name: inputEvent.target.value,\n                              }\n                            : item\n                        )\n                      )\n                    }\n                    value={staffData[index].name}\n                  />\n                </Form.Group>\n                <Form.Group className=\"sra-checkbox\">\n                  <Col xs={\"auto\"}>\n                    <Form.Check\n                      type=\"checkBox\"\n                      label=\"SRA\"\n                      className=\"sra-checkBox\"\n                      onClick={() =>\n                        setStaffData(\n                          staffData.map((item, index2) =>\n                            index === index2\n                              ? {\n                                  ...staffData[index],\n                                  SRA: true,\n                                }\n                              : item\n                          )\n                        )\n                      }\n                    />\n                  </Col>\n                </Form.Group>\n              </Form.Row>\n              <Form.Label>Days Cannot Sit</Form.Label>\n              <Form.Row>\n                {staffData[index].preferences.map((input, index2) => (\n                  <React.Fragment>\n                    <Col xs=\"auto\">\n                      <Form.Group key={index}>\n                        <Form.Control\n                          type=\"date\"\n                          onChange={(inputEvent) =>\n                            setStaffData(\n                              staffData.map((item, index3) =>\n                                index === index3\n                                  ? {\n                                      ...staffData[index],\n                                      preferences: item.preferences.map(\n                                        (item2, index4) =>\n                                          index2 === index4\n                                            ? inputEvent.target.value\n                                            : item2\n                                      ),\n                                    }\n                                  : item\n                              )\n                            )\n                          }\n                          value={staffData[index].preferences[index2]}\n                        />\n                      </Form.Group>\n                    </Col>\n                  </React.Fragment>\n                ))}\n                <Col>\n                  <Button\n                    variant=\"secondary\"\n                    className=\"btn.btn-secondary\"\n                    onClick={() => addDate({ index })}\n                  >\n                    Add date\n                  </Button>\n                </Col>\n              </Form.Row>\n              <Form.Row>\n                <Col>\n                  <Button\n                    variant=\"danger\"\n                    onClick={() => removeStaffMember({ index })}\n                    style = {{marginBottom: '35px'}}\n                  >\n                    Remove Staff Member\n                  </Button>\n                </Col>\n              </Form.Row>\n            </React.Fragment>\n          ))}\n\n          <Form.Row className=\"submit-row\">\n            <Form.Group>\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Form.Group>\n            <Form.Group>\n              <Col>\n                <Button variant=\"secondary\" onClick={addStaffMember}>\n                  Add staff member\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form.Row>\n        </Form>\n      </Container>\n\n      <footer className=\"Footer\"> &copy; Pharez J. Varlack </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}